# coding: utf-8

"""
    app-server

    Resource for managing app-server  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class V1alpha1ComponentGraph(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'component_id': 'str',
        'graph_id': 'str',
        'promql': 'str',
        'sequence': 'int',
        'title': 'str'
    }

    attribute_map = {
        'component_id': 'component_id',
        'graph_id': 'graph_id',
        'promql': 'promql',
        'sequence': 'sequence',
        'title': 'title'
    }

    def __init__(self, component_id=None, graph_id=None, promql=None, sequence=None, title=None, local_vars_configuration=None):  # noqa: E501
        """V1alpha1ComponentGraph - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._component_id = None
        self._graph_id = None
        self._promql = None
        self._sequence = None
        self._title = None
        self.discriminator = None

        self.component_id = component_id
        self.graph_id = graph_id
        self.promql = promql
        self.sequence = sequence
        self.title = title

    @property
    def component_id(self):
        """Gets the component_id of this V1alpha1ComponentGraph.  # noqa: E501


        :return: The component_id of this V1alpha1ComponentGraph.  # noqa: E501
        :rtype: str
        """
        return self._component_id

    @component_id.setter
    def component_id(self, component_id):
        """Sets the component_id of this V1alpha1ComponentGraph.


        :param component_id: The component_id of this V1alpha1ComponentGraph.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and component_id is None:  # noqa: E501
            raise ValueError("Invalid value for `component_id`, must not be `None`")  # noqa: E501

        self._component_id = component_id

    @property
    def graph_id(self):
        """Gets the graph_id of this V1alpha1ComponentGraph.  # noqa: E501


        :return: The graph_id of this V1alpha1ComponentGraph.  # noqa: E501
        :rtype: str
        """
        return self._graph_id

    @graph_id.setter
    def graph_id(self, graph_id):
        """Sets the graph_id of this V1alpha1ComponentGraph.


        :param graph_id: The graph_id of this V1alpha1ComponentGraph.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and graph_id is None:  # noqa: E501
            raise ValueError("Invalid value for `graph_id`, must not be `None`")  # noqa: E501

        self._graph_id = graph_id

    @property
    def promql(self):
        """Gets the promql of this V1alpha1ComponentGraph.  # noqa: E501


        :return: The promql of this V1alpha1ComponentGraph.  # noqa: E501
        :rtype: str
        """
        return self._promql

    @promql.setter
    def promql(self, promql):
        """Sets the promql of this V1alpha1ComponentGraph.


        :param promql: The promql of this V1alpha1ComponentGraph.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and promql is None:  # noqa: E501
            raise ValueError("Invalid value for `promql`, must not be `None`")  # noqa: E501

        self._promql = promql

    @property
    def sequence(self):
        """Gets the sequence of this V1alpha1ComponentGraph.  # noqa: E501


        :return: The sequence of this V1alpha1ComponentGraph.  # noqa: E501
        :rtype: int
        """
        return self._sequence

    @sequence.setter
    def sequence(self, sequence):
        """Sets the sequence of this V1alpha1ComponentGraph.


        :param sequence: The sequence of this V1alpha1ComponentGraph.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and sequence is None:  # noqa: E501
            raise ValueError("Invalid value for `sequence`, must not be `None`")  # noqa: E501

        self._sequence = sequence

    @property
    def title(self):
        """Gets the title of this V1alpha1ComponentGraph.  # noqa: E501


        :return: The title of this V1alpha1ComponentGraph.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this V1alpha1ComponentGraph.


        :param title: The title of this V1alpha1ComponentGraph.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and title is None:  # noqa: E501
            raise ValueError("Invalid value for `title`, must not be `None`")  # noqa: E501

        self._title = title

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V1alpha1ComponentGraph):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, V1alpha1ComponentGraph):
            return True

        return self.to_dict() != other.to_dict()
