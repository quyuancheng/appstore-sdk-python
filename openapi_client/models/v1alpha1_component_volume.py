# coding: utf-8

"""
    app-server

    Resource for managing app-server  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: huangrh@goodrain.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class V1alpha1ComponentVolume(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'access_mode': 'str',
        'file_content': 'str',
        'mode': 'int',
        'share_policy': 'str',
        'volume_capacity': 'int',
        'volume_name': 'str',
        'volume_path': 'str',
        'volume_type': 'str'
    }

    attribute_map = {
        'access_mode': 'access_mode',
        'file_content': 'file_content',
        'mode': 'mode',
        'share_policy': 'share_policy',
        'volume_capacity': 'volume_capacity',
        'volume_name': 'volume_name',
        'volume_path': 'volume_path',
        'volume_type': 'volume_type'
    }

    def __init__(self, access_mode=None, file_content=None, mode=None, share_policy=None, volume_capacity=None, volume_name=None, volume_path=None, volume_type=None, local_vars_configuration=None):  # noqa: E501
        """V1alpha1ComponentVolume - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._access_mode = None
        self._file_content = None
        self._mode = None
        self._share_policy = None
        self._volume_capacity = None
        self._volume_name = None
        self._volume_path = None
        self._volume_type = None
        self.discriminator = None

        if access_mode is not None:
            self.access_mode = access_mode
        self.file_content = file_content
        if mode is not None:
            self.mode = mode
        if share_policy is not None:
            self.share_policy = share_policy
        if volume_capacity is not None:
            self.volume_capacity = volume_capacity
        self.volume_name = volume_name
        self.volume_path = volume_path
        self.volume_type = volume_type

    @property
    def access_mode(self):
        """Gets the access_mode of this V1alpha1ComponentVolume.  # noqa: E501


        :return: The access_mode of this V1alpha1ComponentVolume.  # noqa: E501
        :rtype: str
        """
        return self._access_mode

    @access_mode.setter
    def access_mode(self, access_mode):
        """Sets the access_mode of this V1alpha1ComponentVolume.


        :param access_mode: The access_mode of this V1alpha1ComponentVolume.  # noqa: E501
        :type: str
        """

        self._access_mode = access_mode

    @property
    def file_content(self):
        """Gets the file_content of this V1alpha1ComponentVolume.  # noqa: E501


        :return: The file_content of this V1alpha1ComponentVolume.  # noqa: E501
        :rtype: str
        """
        return self._file_content

    @file_content.setter
    def file_content(self, file_content):
        """Sets the file_content of this V1alpha1ComponentVolume.


        :param file_content: The file_content of this V1alpha1ComponentVolume.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and file_content is None:  # noqa: E501
            raise ValueError("Invalid value for `file_content`, must not be `None`")  # noqa: E501

        self._file_content = file_content

    @property
    def mode(self):
        """Gets the mode of this V1alpha1ComponentVolume.  # noqa: E501


        :return: The mode of this V1alpha1ComponentVolume.  # noqa: E501
        :rtype: int
        """
        return self._mode

    @mode.setter
    def mode(self, mode):
        """Sets the mode of this V1alpha1ComponentVolume.


        :param mode: The mode of this V1alpha1ComponentVolume.  # noqa: E501
        :type: int
        """

        self._mode = mode

    @property
    def share_policy(self):
        """Gets the share_policy of this V1alpha1ComponentVolume.  # noqa: E501


        :return: The share_policy of this V1alpha1ComponentVolume.  # noqa: E501
        :rtype: str
        """
        return self._share_policy

    @share_policy.setter
    def share_policy(self, share_policy):
        """Sets the share_policy of this V1alpha1ComponentVolume.


        :param share_policy: The share_policy of this V1alpha1ComponentVolume.  # noqa: E501
        :type: str
        """

        self._share_policy = share_policy

    @property
    def volume_capacity(self):
        """Gets the volume_capacity of this V1alpha1ComponentVolume.  # noqa: E501


        :return: The volume_capacity of this V1alpha1ComponentVolume.  # noqa: E501
        :rtype: int
        """
        return self._volume_capacity

    @volume_capacity.setter
    def volume_capacity(self, volume_capacity):
        """Sets the volume_capacity of this V1alpha1ComponentVolume.


        :param volume_capacity: The volume_capacity of this V1alpha1ComponentVolume.  # noqa: E501
        :type: int
        """

        self._volume_capacity = volume_capacity

    @property
    def volume_name(self):
        """Gets the volume_name of this V1alpha1ComponentVolume.  # noqa: E501


        :return: The volume_name of this V1alpha1ComponentVolume.  # noqa: E501
        :rtype: str
        """
        return self._volume_name

    @volume_name.setter
    def volume_name(self, volume_name):
        """Sets the volume_name of this V1alpha1ComponentVolume.


        :param volume_name: The volume_name of this V1alpha1ComponentVolume.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and volume_name is None:  # noqa: E501
            raise ValueError("Invalid value for `volume_name`, must not be `None`")  # noqa: E501

        self._volume_name = volume_name

    @property
    def volume_path(self):
        """Gets the volume_path of this V1alpha1ComponentVolume.  # noqa: E501


        :return: The volume_path of this V1alpha1ComponentVolume.  # noqa: E501
        :rtype: str
        """
        return self._volume_path

    @volume_path.setter
    def volume_path(self, volume_path):
        """Sets the volume_path of this V1alpha1ComponentVolume.


        :param volume_path: The volume_path of this V1alpha1ComponentVolume.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and volume_path is None:  # noqa: E501
            raise ValueError("Invalid value for `volume_path`, must not be `None`")  # noqa: E501

        self._volume_path = volume_path

    @property
    def volume_type(self):
        """Gets the volume_type of this V1alpha1ComponentVolume.  # noqa: E501


        :return: The volume_type of this V1alpha1ComponentVolume.  # noqa: E501
        :rtype: str
        """
        return self._volume_type

    @volume_type.setter
    def volume_type(self, volume_type):
        """Sets the volume_type of this V1alpha1ComponentVolume.


        :param volume_type: The volume_type of this V1alpha1ComponentVolume.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and volume_type is None:  # noqa: E501
            raise ValueError("Invalid value for `volume_type`, must not be `None`")  # noqa: E501

        self._volume_type = volume_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V1alpha1ComponentVolume):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, V1alpha1ComponentVolume):
            return True

        return self.to_dict() != other.to_dict()
