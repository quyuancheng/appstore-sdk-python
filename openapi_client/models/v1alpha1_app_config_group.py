# coding: utf-8

"""
    app-server

    Resource for managing app-server  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class V1alpha1AppConfigGroup(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'component_keys': 'list[str]',
        'config_items': 'dict(str, str)',
        'injection_type': 'str',
        'name': 'str'
    }

    attribute_map = {
        'component_keys': 'component_keys',
        'config_items': 'config_items',
        'injection_type': 'injection_type',
        'name': 'name'
    }

    def __init__(self, component_keys=None, config_items=None, injection_type=None, name=None, local_vars_configuration=None):  # noqa: E501
        """V1alpha1AppConfigGroup - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._component_keys = None
        self._config_items = None
        self._injection_type = None
        self._name = None
        self.discriminator = None

        self.component_keys = component_keys
        self.config_items = config_items
        self.injection_type = injection_type
        self.name = name

    @property
    def component_keys(self):
        """Gets the component_keys of this V1alpha1AppConfigGroup.  # noqa: E501


        :return: The component_keys of this V1alpha1AppConfigGroup.  # noqa: E501
        :rtype: list[str]
        """
        return self._component_keys

    @component_keys.setter
    def component_keys(self, component_keys):
        """Sets the component_keys of this V1alpha1AppConfigGroup.


        :param component_keys: The component_keys of this V1alpha1AppConfigGroup.  # noqa: E501
        :type: list[str]
        """
        if self.local_vars_configuration.client_side_validation and component_keys is None:  # noqa: E501
            raise ValueError("Invalid value for `component_keys`, must not be `None`")  # noqa: E501

        self._component_keys = component_keys

    @property
    def config_items(self):
        """Gets the config_items of this V1alpha1AppConfigGroup.  # noqa: E501


        :return: The config_items of this V1alpha1AppConfigGroup.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._config_items

    @config_items.setter
    def config_items(self, config_items):
        """Sets the config_items of this V1alpha1AppConfigGroup.


        :param config_items: The config_items of this V1alpha1AppConfigGroup.  # noqa: E501
        :type: dict(str, str)
        """
        if self.local_vars_configuration.client_side_validation and config_items is None:  # noqa: E501
            raise ValueError("Invalid value for `config_items`, must not be `None`")  # noqa: E501

        self._config_items = config_items

    @property
    def injection_type(self):
        """Gets the injection_type of this V1alpha1AppConfigGroup.  # noqa: E501


        :return: The injection_type of this V1alpha1AppConfigGroup.  # noqa: E501
        :rtype: str
        """
        return self._injection_type

    @injection_type.setter
    def injection_type(self, injection_type):
        """Sets the injection_type of this V1alpha1AppConfigGroup.


        :param injection_type: The injection_type of this V1alpha1AppConfigGroup.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and injection_type is None:  # noqa: E501
            raise ValueError("Invalid value for `injection_type`, must not be `None`")  # noqa: E501

        self._injection_type = injection_type

    @property
    def name(self):
        """Gets the name of this V1alpha1AppConfigGroup.  # noqa: E501


        :return: The name of this V1alpha1AppConfigGroup.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this V1alpha1AppConfigGroup.


        :param name: The name of this V1alpha1AppConfigGroup.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and name is None:  # noqa: E501
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V1alpha1AppConfigGroup):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, V1alpha1AppConfigGroup):
            return True

        return self.to_dict() != other.to_dict()
