# coding: utf-8

"""
    app-server

    Resource for managing app-server  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: huangrh@goodrain.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class V1alpha1Endpoints(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'endpoints_info': 'str',
        'endpoints_type': 'str',
        'service_cname': 'str'
    }

    attribute_map = {
        'endpoints_info': 'endpoints_info',
        'endpoints_type': 'endpoints_type',
        'service_cname': 'service_cname'
    }

    def __init__(self, endpoints_info=None, endpoints_type=None, service_cname=None, local_vars_configuration=None):  # noqa: E501
        """V1alpha1Endpoints - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._endpoints_info = None
        self._endpoints_type = None
        self._service_cname = None
        self.discriminator = None

        self.endpoints_info = endpoints_info
        self.endpoints_type = endpoints_type
        self.service_cname = service_cname

    @property
    def endpoints_info(self):
        """Gets the endpoints_info of this V1alpha1Endpoints.  # noqa: E501


        :return: The endpoints_info of this V1alpha1Endpoints.  # noqa: E501
        :rtype: str
        """
        return self._endpoints_info

    @endpoints_info.setter
    def endpoints_info(self, endpoints_info):
        """Sets the endpoints_info of this V1alpha1Endpoints.


        :param endpoints_info: The endpoints_info of this V1alpha1Endpoints.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and endpoints_info is None:  # noqa: E501
            raise ValueError("Invalid value for `endpoints_info`, must not be `None`")  # noqa: E501

        self._endpoints_info = endpoints_info

    @property
    def endpoints_type(self):
        """Gets the endpoints_type of this V1alpha1Endpoints.  # noqa: E501


        :return: The endpoints_type of this V1alpha1Endpoints.  # noqa: E501
        :rtype: str
        """
        return self._endpoints_type

    @endpoints_type.setter
    def endpoints_type(self, endpoints_type):
        """Sets the endpoints_type of this V1alpha1Endpoints.


        :param endpoints_type: The endpoints_type of this V1alpha1Endpoints.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and endpoints_type is None:  # noqa: E501
            raise ValueError("Invalid value for `endpoints_type`, must not be `None`")  # noqa: E501

        self._endpoints_type = endpoints_type

    @property
    def service_cname(self):
        """Gets the service_cname of this V1alpha1Endpoints.  # noqa: E501


        :return: The service_cname of this V1alpha1Endpoints.  # noqa: E501
        :rtype: str
        """
        return self._service_cname

    @service_cname.setter
    def service_cname(self, service_cname):
        """Sets the service_cname of this V1alpha1Endpoints.


        :param service_cname: The service_cname of this V1alpha1Endpoints.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and service_cname is None:  # noqa: E501
            raise ValueError("Invalid value for `service_cname`, must not be `None`")  # noqa: E501

        self._service_cname = service_cname

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V1alpha1Endpoints):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, V1alpha1Endpoints):
            return True

        return self.to_dict() != other.to_dict()
